---
import type { HTMLAttributeReferrerPolicy } from './types';

export interface Props {
  class?: string;
  variation?: string;
  href: string;
  referrerpolicy?: HTMLAttributeReferrerPolicy | null | undefined;
  target?: string;
  itemprop?: string;
}

const {
  class: className,
  href,
  referrerpolicy,
  target,
  variation,
} = Astro.props;

const dynamicClasses = [className, variation ? `is-${variation}` : ''];
---

{
  href && variation && (
    <a
      class:list={dynamicClasses}
      href={href}
      referrerpolicy={referrerpolicy ?? 'strict-origin-when-cross-origin'}
      rel="noopener"
      target={target ?? '_self'}
    >
      <slot />
    </a>
  )
}

<style>
  .is-blue,
  .is-green,
  .is-white,
  .is-composed {
    @apply flex
    w-fit
    items-center
    justify-center
    gap-3
    font-ubuntu
    font-bold	
    text-sm
    transition-all
    ease-in-out
    hover:drop-shadow-[4px_6px_4px_rgba(0,0,0,0.25)]
    active:shadow-none;
  }

  .is-blue,
  .is-green,
  .is-white {
    @apply rounded-lg
    px-5
    py-3;
  }

  .is-blue {
    @apply bg-navyBlue
    text-neutral;
  }

  .is-white {
    @apply border-2
    border-solid
    border-navyBlue
    bg-whiteOpacity
    text-navyBlue
    hover:bg-navyBlue
    hover:text-neutral;
  }

  .is-green {
    @apply bg-darkGreen
    text-neutral;
  }
  .is-green:hover {
    @apply bg-whiteOpacity
    text-navyBlue;
  }

  .is-composed {
    @apply text-navyBlue
    hover:underline;
  }
</style>
